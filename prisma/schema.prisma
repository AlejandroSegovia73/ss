generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model answers {
  answer_id   Int        @id @default(autoincrement())
  question_id Int?
  answer_text String     @db.Text
  questions   questions? @relation(fields: [question_id], references: [question_id], onDelete: NoAction, onUpdate: NoAction, map: "answers_ibfk_2")

  @@index([question_id], map: "question_id")
}

model questions {
  question_id   Int                     @id @default(autoincrement())
  survey_id     Int
  question_text String                  @db.Text
  question_type questions_question_type
  answers       answers[]
  surveys       surveys                 @relation(fields: [survey_id], references: [survey_id], onDelete: NoAction, onUpdate: NoAction, map: "questions_ibfk_1")
  user_answers  user_answers[]

  @@index([survey_id], map: "survey_id")
}

model surveys {
  survey_id   Int         @id @default(autoincrement())
  title       String      @db.VarChar(255)
  description String?     @db.Text
  created_at  DateTime?   @default(now()) @db.Timestamp(0)
  estatus     String      @db.VarChar(25)
  questions   questions[]
}

model usrs {
  id                 Int                  @id @default(autoincrement())
  RFC                String?              @unique(map: "unique_rfc") @db.VarChar(13)
  nombre             String?              @db.VarChar(50)
  edad               String?              @db.VarChar(3)
  direccion          String?              @db.VarChar(50)
  celular            String?              @db.VarChar(50)
  telefono           String?              @db.VarChar(50)
  correo             String?              @db.VarChar(50)
  redSocial          String?              @db.VarChar(50)
  tipoEmpleado       String?              @db.VarChar(50)
  contrato           String?              @db.VarChar(50)
  horario            String?              @db.VarChar(50)
  estado             String?              @db.VarChar(50)
  antiguedad         String?              @db.VarChar(50)
  experiencialaboral experiencialaboral[]
  user_answers       user_answers[]

  @@index([RFC], map: "idx_RFC")
}

model experiencialaboral {
  id                Int     @id @default(autoincrement())
  RFC               String? @db.VarChar(13)
  nombreEmpleo      String? @db.VarChar(50)
  nombreCompa_ia    String? @map("nombreCompañia") @db.VarChar(50)
  direccion         String? @db.VarChar(50)
  telefonoEmpleo    String? @db.VarChar(50)
  puestoDesempe_ado String? @map("puestoDesempeñado") @db.VarChar(50)
  sueldoPromedio    String? @db.VarChar(50)
  motivoSeparacion  String? @db.VarChar(50)
  usrs              usrs?   @relation(fields: [RFC], references: [RFC], onDelete: NoAction, onUpdate: NoAction, map: "experiencialaboral_ibfk_1")

  @@index([RFC], map: "RFC")
}

model user_answers {
  user_answer_id    Int        @id @default(autoincrement())
  user_id           Int?
  question_id       Int?
  chosen_answer_ids String?    @db.Text
  usrs              usrs?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_answers_ibfk_1")
  questions         questions? @relation(fields: [question_id], references: [question_id], onDelete: NoAction, onUpdate: NoAction, map: "user_answers_ibfk_2")

  @@index([question_id], map: "question_id")
  @@index([user_id], map: "user_id")
}

enum questions_question_type {
  multiple_choice
  open_text
  checkbox
  radio
}
